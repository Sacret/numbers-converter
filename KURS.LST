Turbo Assembler	 Version 4.1	    24/05/08 13:09:05	    Page 1
KURS.asm



      1				     ; Курсовая	работа по информатике
      2				     ; Программа перевода чисел	из из одной сисетмы счисления в	другие.	(2/10/16)
      3
      4	0000			     .MODEL Small
      5	0000			     .STACK 100h
      6	0000			     .DATA
      7
      8				     ; Сегмент данных
      9
     10	0000  14*(??) 24		 String	   db	 20 dup	(?),'$'	     ; Резервируем 20 байт для строки
     11	      =DGROUP:0014		 StringEnd	=  $-1			; Указывает на символ '$'
     12	0015  14*(????)	0024		 Number	  dw 20	dup (?), '$'	 ; инициализируем переменную, в	которой	будет храниться	число
     13
     14				     ; Далее идут всевозможные сообщения, которые будут	выводиться на экран
     15
     16	003F  0D 0A 20 20 20 20	20+	Nachalo	  db   0dh, 0ah, "	    KURSOVAYA RABOTA - PEREVOD CHISEL IZ ODNOJ SISTEMI V    +
     17	      20 20 20 20 20 4B	55+  DRUGUYU",13,10,"$"
     18	      52 53 4F 56 41 59	41+
     19	      20 52 41 42 4F 54	41+
     20	      20 2D 20 50 45 52	45+
     21	      56 4F 44 20 43 48	49+
     22	      53 45 4C 20 49 5A	20+
     23	      4F 44 4E 4F 4A 20	53+
     24	      49 53 54 45 4D 49	20+
     25	      56 20 44 52 55 47	55+
     26	      59 55 0D 0A 24
     27	008A  0D 0A 56 69 62 65	72+	Vvod	     db	 13,10,	"Viberete tip chisla:",13,10,13,10,"  1	- 16-chnoe",13,10,"  2 -    +
     28	      65 74 65 20 74 69	70+  10-chnoe",13,10,"	3 - 2-chnoe",13,10, 13,10,"Vvedite vash	vibor (bez echa), a zatem samo	    +
     29	      20 63 68 69 73 6C	61+  chislo:",13,10,13,10,"$"
     30	      3A 0D 0A 0D 0A 20	20+
     31	      31 20 2D 20 31 36	2D+
     32	      63 68 6E 6F 65 0D	0A+
     33	      20 20 32 20 2D 20	31+
     34	      30 2D 63 68 6E 6F	65+
     35	      0D 0A 20 20 33 20	2D+
     36	      20 32 2D 63 68 6E	6F+
     37	      65 0D 0A 0D 0A 56	76+
     38	      65 64 69 74 65 20	76+
     39	      61 73 68 20 76 69	62+
     40	      6F 72 20 28 62 65	7A+
     41	      20 65 63 68 61 29	2C+
     42	      20 61 20 7A 61 74	65+
     43	      6D 20 73 61 6D 6F	20+
     44	      63 68 69 73 6C 6F	3A+
     45	      0D 0A 0D 0A 24
     46
     47	010D  0D 0A 43 68 69 73	6C+	 Mes_1	   db	 0dh, 0ah, "Chislo v 16-y  sisteme schisleniya - ", " $"      ;	1-ое	    +
     48	      6F 20 76 20 31 36	2D+  сообщение
     49	      79 20 20 73 69 73	74+
     50	      65 6D 65 20 73 63	68+
     51	      69 73 6C 65 6E 69	79+
     52	      61 20 2D 20 20 24
     53	0136  0D 0A 43 68 69 73	6C+	 Mes_2	   db	 0dh, 0ah, "Chislo v 10-y  sisteme schisleniya - ", " $"      ;	2-ое	    +
     54	      6F 20 76 20 31 30	2D+  сообщение
     55	      79 20 20 73 69 73	74+
     56	      65 6D 65 20 73 63	68+
     57	      69 73 6C 65 6E 69	79+
Turbo Assembler	 Version 4.1	    24/05/08 13:09:05	    Page 2
KURS.asm



     58	      61 20 2D 20 20 24
     59	015F  0D 0A 43 68 69 73	6C+	 Mes_3	   db	 0dh, 0ah, "Chislo v 2-y   sisteme schisleniya - ", " $"      ;	3-ье	    +
     60	      6F 20 76 20 32 2D	79+  сообщение
     61	      20 20 20 73 69 73	74+
     62	      65 6D 65 20 73 63	68+
     63	      69 73 6C 65 6E 69	79+
     64	      61 20 2D 20 20 24
     65
     66	0188  0D 0A 0D 0A 44 6C	79+	Vihod db 0dh, 0ah,13,10, "Dlya vihoda nazhmite lyubuyu klavishu	", "$"
     67	      61 20 76 69 68 6F	64+
     68	      61 20 6E 61 7A 68	6D+
     69	      69 74 65 20 6C 79	75+
     70	      62 75 79 75 20 6B	6C+
     71	      61 76 69 73 68 75	20+
     72	      24
     73
     74	01B3			     .CODE
     75				     ; Сегмент кода
     76
     77				     ORG 100h
     78				     ;_______________________________________________________________________
     79	0100			     Start:		     ; начало основной программы
     80	0100  B8 0000s			     mov ax,@data    ; адрес сегмента данных в регистр ax связываем регистр dx с сегментом)
     81	0103  8E D8			     mov ds,ax	     ; данные через регистр ax
     82	0105  8E C0			     mov es,ax
     83				     ;-----------------------------------------------------------------------------------------------
     84				     -----------------------------------------------
     85	0107  BA 0000		     mov dx, 0000	     ; Установить курсор в 00.00
     86	010A  E8 0156		     call Kursor	     ; Установка курсора
     87	010D  E8 0145		     call ClearScreen	     ; Очистка экрана
     88
     89	0110  BA 003Fr					     lea dx, Nachalo ; Печать одного из	сообщений
     90	0113  B4 09				     mov ah, 09h
     91	0115  CD 21				     int 21h
     92
     93	0117  BA 008Ar				     lea dx, Vvod	     ; Печатаем	запрос на ввод
     94	011A  B4 09				     mov ah, 09h
     95	011C  CD 21				     int 21h
     96				     ;_______________________________________________________________________
     97
     98	011E  B4 08		     mov ah, 08h	     ; без эха вводим число (1/2/3) для	выбора системы счисления
     99	0120  CD 21		     int 21h
    100
    101	0122			     ViborSS:		     ; по введенному числу узнаем выбор	системы	счисления
    102	0122  3C 31			     cmp     al,'1'		      ;	если нажата клавиша '1',
    103	0124  74 7A			     je	     Per16	      ;	то переход на метку Per16 - перевод в 16-чную систему
    104	0126  3C 32			     cmp     al,'2'	      ;	если клавиша '2' не нажата,
    105	0128  75 03			     jne     cm1	      ;	то переход на метку Сm1
    106	012A  EB 0A 90			     jmp     Per10	      ;	переход	на метку Per10	- перевод в 10-ную систему
    107	012D  3C 33		     cm1:    cmp     al,'3'		      ;	если не	нажата клавиша ‘3’,
    108	012F  75 03			     jne     cm2	      ;	то переход на метку cm2
    109	0131  EB 73 90			     jmp     Per2	      ;	переход	на метку Per2 -	перевод	в 2-чную систему
    110	0134  EB EC		     cm2:    jmp     ViborSS		      ;	переход	на метку ViborSS - ввели недопустимое число!
    111				     ;________________________________________________________________________
    112				     ; На этой метке мы	вводим в программу с клавиатуры	число в	10-чной	системе	счисления,
    113				     ; а затем переводим его в остальные...
    114
Turbo Assembler	 Version 4.1	    24/05/08 13:09:05	    Page 3
KURS.asm



    115	0136			     Per10:
    116
    117				     ; Распределение регистров:
    118				     ; di - накопленная	часть числа
    119				     ; si - номер текущей позиции
    120				     ; bp=10 - делитель	для процедуры ввода
    121				     ; ax и dx - служебные регистры (буферы)
    122
    123	0136  BF 0000			     mov     di, 0	     ; Пока ничего не введено, считаем,	что число 0
    124	0139  BE 0000			     mov     si, 0	     ; Номер позиции в числе
    125	013C  BD 000A			     mov     bp, 10	     ; Потом будем умножать на 10
    126
    127	013F			     r1:			     ; далее идет ввод символов
    128	013F  B4 08			     mov     ah, 08h ; Без эха вводим число с клавиатуры
    129	0141  CD 21			     int     21h	     ; Читаем введенный	символ
    130	0143  3C 30			     cmp     al, '0'	     ; Если это	служебный символ -> r3
    131	0145  72 20			     jb	     r3
    132	0147  3C 39			     cmp     al,'9'	     ; Если это	не цифра -> r1
    133	0149  77 F4			     ja	     r1
    134	014B  8A D8			     mov     bl, al	     ; Если допустимый символ -	сохраним его в bl
    135	014D  8B C7			     mov     ax, di
    136	014F  F7 E5			     mul     bp		     ; Умножаем	на 10
    137
    138	0151  8A D3			     mov     dl, bl
    139	0153  80 EA 30			     sub     dl, '0'	     ; Преобразуем символ в цифру
    140	0156  B6 00			     mov     dh, 0	     ; DX - цифра
    141	0158  03 D0			     add     dx,ax	     ; складываем содержимое регистров
    142	015A  72 E3			     jc	     r1		     ; Если перенос -> переполнение
    143	015C  46			     inc     si		     ; инкремент si
    144	015D  8B FA			     mov     di, dx
    145	015F  8A D3			     mov     dl, bl
    146	0161  B4 02			     mov     ah, 02h ; вывод знака на консоль
    147	0163  CD 21			     int     21h
    148	0165  EB D8			     jmp     r1		     ; идем на ввод следующего символа
    149
    150	0167			     r3:			     ; в случае	нажатия	служебной клавиши
    151	0167  83 FE 00			     cmp     si, 0	     ; если до этого не	было введено ни	одного числа
    152	016A  74 D3			     je	     r1		     ; идем на r1
    153	016C  3C 0D			     cmp     al, 13	     ; если это	Enter
    154	016E  74 1E			     je	     enter	     ; Нажали ввод
    155	0170  3C 08			     cmp     al, 8	     ; Нажали забой (BackSpace)
    156	0172  75 CB			     jne     r1
    157	0174			     zab:			     ; если нажали забой (BackSpace)
    158	0174  4E			     dec     si		     ; декремент si (последний элемент нужно стереть)
    159	0175  8B C7			     mov     ax, di
    160	0177  BA 0000			     mov     dx, 0
    161	017A  F7 F5			     div     bp
    162	017C  8B F8			     mov     di, ax
    163	017E  B2 08			     mov     dl, 8
    164	0180  B4 02			     mov     ah, 2	     ; вывод на	консоль
    165	0182  CD 21			     int     21h
    166	0184  B2 20			     mov     dl, 32
    167	0186  CD 21			     int     21h
    168	0188  B2 08			     mov     dl, 8
    169	018A  CD 21			     int     21h
    170	018C  EB B1			     jmp     r1		     ; стерли предыдущий символ	- значит, вводим следующий
    171
Turbo Assembler	 Version 4.1	    24/05/08 13:09:05	    Page 4
KURS.asm



    172	018E			     enter:			     ; при нажатии Enter
*Warning* KURS.asm(122)	Reserved word used as symbol: ENTER
    173	018E  B4 02			     mov     ah, 2h
    174	0190  B2 0D			     mov     dl, 13	     ; "печатаем" переход на следующую строку
    175	0192  CD 21			     int     21h
    176
    177	0194  B2 0A			     mov     dl, 10	     ; перевод строки
    178	0196  CD 21			     int     21h
    179	0198  8B C7			     mov     ax,di	     ; введенное число - в ax
    180
    181	019A  A3 0015r		     mov Number, ax	     ; затем записываем	его в переменную
    182	019D  EB 38 90		     jmp Metka			     ; переходим на метку, где переводим это число в другие системы +
    183				     счисления
    184				     ;_________________________________________________________________________________________
    185				     ; На этой метке мы	вводим в программу с клавиатуры	число в	16-чной	системе	счисления,
    186				     ; а затем переводим его в остальные...
    187
    188	01A0			     Per16:
    189
    190	01A0  E8 00C7		     call Input16	     ; ввод оформлен в виде процедуры, поэтому мы её вызываем
    191	01A3  EB 32 90		     jmp Metka		     ; переходим на метку, где переводим это число в другие системы счисления
    192				     ;_________________________________________________________________________________________
    193				     ; На этой метке мы	вводим в программу с клавиатуры	число в	2-чной системе счисления,
    194				     ; а затем переводим его в остальные...
    195
    196	01A6			     Per2:
    197
    198	01A6  BE 0008			     Mov si, 8		     ; устанавливаем счетчик, так как ставим ограничение на ввод    +
    199				     символов
    200	01A9  33 DB			     xor bx, bx		     ; обнулили	bx
    201
    202	01AB			     Next:			     ; необходимая метка
    203	01AB  B4 08			     mov ah, 08h	     ; ввод без	эха с клавиатуры
    204	01AD  CD 21			     int 21h
    205
    206	01AF  3C 0D			     cmp al, 13		     ; если нажат Enter	- переходим на метку Stop (т.е.	прекращаем  +
    207				     ввод)
    208	01B1  74 1C			     je	Stop
    209	01B3  3C 30			     cmp al, '0'	     ; если меньше нуля,
    210	01B5  72 F4			     jb	Next		     ; символ пропускаем и идем	дальше
    211	01B7  3C 31			     cmp al, '1'	     ; то же самое, если больше	единицы	- для двоичной недопустимые +
    212				     символы
    213	01B9  77 F0			     ja	Next
    214
    215	01BB  B4 02			     mov ah, 02		     ; если символ допустимый -	вывод на экран
    216	01BD  8A D0			     mov dl, al		     ; и сохраняем код нажатой клавиши
    217	01BF  CD 21			     int 21h
    218
    219	01C1  D1 E3			     shl bx, 1		     ; сдвиг влево на 1
    220	01C3  80 EA 30			     sub dl, '0'	     ; получаем	из кода	цифру (отнимаем	код нуля)
    221	01C6  32 F6			     xor dh, dh		     ; обнуляем	dh
    222				     ; сложение	двух целочисленных двоичных операндов
    223				     ; bx и dx,	результат сохраняем в bx
    224	01C8  03 DA			     add bx, dx
    225	01CA  4E			     dec si		     ; уменьшаем счетчик
    226	01CB  85 F6			     test si, si	     ; проверка	на равенство нулю (нельзя ввести символов больше,   +
    227				     чем разрешено)
Turbo Assembler	 Version 4.1	    24/05/08 13:09:05	    Page 5
KURS.asm



    228	01CD  75 DC			     jnz Next		     ; если не ноль - вводим следующий символ
    229
    230	01CF			     Stop:			     ; в том случае, если нажали Enter - прекращаем ввод
    231	01CF  B0 0A			     mov al, 10		     ; перевод строки
    232	01D1  CD 29			     int 29h
    233	01D3  89 1E 0015r		     mov Number, bx  ; сохраняем в переменную введенное	2-чное число
    234				     ;_____________________________________________________________________________________________
    235
    236	01D7			     Metka:		     ; реализуем алгоритм перевода чисел
    237
    238				     ; перевод в 16-ную	систему
    239
    240	01D7  BA 010Dr				     lea dx, Mes_1	      ;	выводим	на экран 1-ое сообщение
    241	01DA  B4 09					     mov ah, 09h
    242	01DC  CD 21				     int 21h
    243
    244	01DE  A1 0015r				     mov ax, Number	  ; записываем в ax число
    245	01E1  BB 0010					     mov  bx, 16	       ; в bx -	основание системы счисления	    +
    246				     (делитель)
    247	01E4  FD					     std		       ; Устанавливаем обратный	порядок	записи
    248	01E5  BF 000Er					     lea di,StringEnd-6	    ; печать начинаем с	6-го с конца символа (ES:DI +
    249				     - 6 с конца символ	строки)
    250	01E8  E8 004D					     call    Perevod_num  ; вызываем процедуру перевода
    251	01EB  B4 09					     mov ah, 09h
    252	01ED  BA 0000r					     lea dx, String	       ; печать	полученного ответа
    253	01F0  CD 21					     int 21h
    254
    255				     ; перевод в 10-ную	систему
    256
    257	01F2  BA 0136r			     lea dx, Mes_2	     ; выводим на экран	2-ое сообщение
    258	01F5  B4 09				     mov ah, 09h
    259	01F7  CD 21				     int 21h
    260
    261	01F9  A1 0015r				     mov ax ,Number  ; в ax помещаем число
    262	01FC  BB 000A				     mov  bx, 10	     ; записываем основание системы счисления
    263	01FF  FD			     std
    264	0200  BF 000Er				     lea di, StringEnd-6      ;	печать начинаем	с 6-го с конца символа
    265	0203  E8 0032				     call    Perevod_num     ; вызываем	процедуру
    266	0206  B4 09				     mov ah, 09h
    267	0208  BA 0000r				     lea dx, String	     ; печать строки ответа
    268	020B  CD 21				     int 21h
    269
    270				     ; перевод в 2-ную систему
    271
    272	020D  BA 015Fr				     lea dx,Mes_3	     ; печатаем	3-ье сообщение
    273	0210  B4 09					     mov ah,09h
    274	0212  CD 21					     int 21h
    275
    276	0214  A1 0015r					     mov ax,Number   ; в ax - число
    277	0217  BB 0002					     mov  bx,2		     ; в bx - основание	системы	счисления
    278	021A  FD				     std
    279	021B  BF 000Er					     lea di,StringEnd-6	      ;	печать начинаем	с 6-го с конца символа
    280	021E  E8 0017					     call    Perevod_num     ; вызов процедуры
    281	0221  B4 09					     mov ah,09h
    282	0223  BA 0000r					     lea dx,String	     ; печатаем	ответ
    283	0226  CD 21					     int 21h
    284
Turbo Assembler	 Version 4.1	    24/05/08 13:09:05	    Page 6
KURS.asm



    285				     ;---------------------------------Окончание основной					    +
    286				     программы---------------------------------------
    287								      ;ожидать нажатия любой клавиши
    288	0228  BA 0188r		      lea dx, Vihod
    289	022B  B4 09		      mov  ah, 09h
    290	022D  CD 21		      int 21h
    291	022F  B4 08			     mov ah,8
    292	0231  CD 21			     int 21h
    293				     ; стандартный выход из программы -	в данном случае	при нажатии любой клавиши
    294	0233  B4 4C			     mov ah, 4ch
    295	0235  CD 21			     int 21h
    296	0237  C3			     ret
    297				     ;------------------------------------- Процедура -	перевод	числа				    +
    298				     ---------------------------------------------------
    299	0238			     Perevod_num proc		     ; объявление процедуры
    300	0238  52			     push    dx		     ; поднимаем в стек
    301	0239  57			     push    di
    302	023A  51			     push    cx
    303	023B  33 C9			     xor cx, cx			     ; обнуляем	cx
    304
    305	023D			     Proverka_num:	     ; процедура проверки
    306	023D  33 D2			     xor dx,dx		     ; обнуляем	dx
    307	023F  F7 F3			     div bx		     ; делим на	основание системы счисления
    308	0241  92			     xchg    ax,dx	     ; обмен ax	и dx (нас интересует остаток)
    309	0242  04 30			     add al,'0'			     ; прибавляем код нуля (получаем символ цифры)
    310	0244  3C 39			     cmp al,'9'		     ; сравнение с символом 9
    311	0246  76 02			     jbe  Cifra			     ; если меньше либо	равно -	переход	на Cifra (то есть   +
    312				     записываем	его)
    313	0248  04 07			     add al,'A'-('9'+1)		     ; в противном случае - число заменяем буквой (16-ричная+
    314				     система)
    315
    316	024A			     Cifra:			     ; если это	цифра:
    317	024A  AA			     stosb		     ; записываем ее в строку
    318	024B  92			     xchg    ax,dx	     ; обмен и ax dx
    319	024C  41			     inc cx		     ; инкремент cx
    320	024D  85 C0			     test  ax, ax	     ; проверка
    321	024F  75 EC			     jne Proverka_num	     ; если неравны - переход на Proverka_num
    322
    323	0251  59			     pop cx			     ; опускаем	из стека
    324	0252  5F			     pop di
    325	0253  5A			     pop dx
    326	0254  C3			     ret
    327	0255			     Perevod_num endp		     ; окончание процедуры
    328				     ;_____________________________________________________________________________
    329				     ;		    Процедура очистики экрана:
    330
    331	0255			     ClearScreen  PROC	 NEAR
    332	0255  B8 0600			     MOV    AX,	0600H		  ; Функция прокрутки экрана
    333	0258  B7 1E			     MOV    BH,	30		      ;	Цвет (07 для ч/б)
    334	025A  B9 0000			     MOV    CX,	0000	      ;	От 00,00
    335	025D  BA 184F			     MOV    DX,184FH	      ;	До 24,79
    336	0260  CD 10			     INT    10H		      ;	Вызов BIOS
    337	0262  C3			     RET
    338	0263			     ClearScreen endp
    339				     ;______________________________________________________________________________
    340				     ;		    Процедура установки	курсора	(строка/столбец):
    341
Turbo Assembler	 Version 4.1	    24/05/08 13:09:05	    Page 7
KURS.asm



    342	0263			     Kursor PROC   NEAR		      ;	DX уже установлен - в начале программы
    343	0263  B4 02			     MOV    AH,	02		     ; Функция установки курсора
    344	0265  B7 00			     MOV    BH,	00	     ; Страница	#0
    345	0267  CD 10			     INT    10H		     ; Вызов BIOS
    346	0269  C3			     RET
    347	026A			     Kursor ENDP
    348				     ;______________________________________________________________________________
    349				     ; Процедура ввода с клавиатуры 16-чного числа
    350
    351	026A			      Input16	proc	near
    352
    353	026A  51			     push    cx
    354	026B  52			     push    dx
    355							     ; Будем накапливать число в CX.
    356	026C  33 C9			     xor     cx, cx
    357							     ; Введём очередную	цифру, одновременно показав её на экране.
    358	026E			     @ih0:
    359	026E  B4 01			     mov     ah, 01h ; ввод с консоли -	с эхом
    360	0270  CD 21			     int     21h
    361
    362				     ; Теперь надо преобразовать её в число. Надо отобразить
    363				     ; '0'..'9'	(30h..39h) в 0..9, 'A'..'F' (41h..46h) и
    364				     ; 'a'..'f'	(61h..66h) в 10..15, а всё остальное забраковать.
    365				     ; '0'..'9', 'A'..'F', 'a'..'f' => 0..9, 11h..16h, 31h..36h
    366
    367	0272  2C 30			     sub     al, 30h
    368
    369				     ; Пользуясь тем, что sub устанавливает флаги так же, как cmp,
    370				     ; прекращаем ввод,	если символ оказался до	'0' в таблице ASCII.
    371				     ; Сюда же,	кстати,	попадает случай	нажатия	enter (0Dh).
    372
    373	0274  72 22			     jb	     short @ih3
    374
    375				     ; Теперь смотрим, если это	цифра (0..9), то мы её получили. Можно
    376				     ; добавлять её к числу.
    377
    378	0276  3C 09			     cmp     al, 09h
    379	0278  76 12			     jbe     short @ih2
    380
    381				     ; Если же нет, то переводим 11h..16h, 31h..36h в 0..5, 20h..25h.
    382
    383	027A  2C 11			     sub     al, 11h
    384
    385				     ; Если исходный символ был	между '9' и 'A', прекращаем ввод.
    386
    387	027C  72 1A			     jb	     short @ih3
    388
    389				     ; Если он попал в 'A'..'F', перешедший в 0..5, то,	чтобы получить
    390				     ; введённую шестнадцатеричную цифру, осталось прибавить к DL десять.
    391
    392	027E  3C 05			     cmp     al, 5
    393	0280  76 08			     jbe     short @ih1
    394
    395				     ; Если до сих пор вводим, то переводим 20h..25h в 0..5.
    396				     ; Если выскочили за ноль, то введённый символ нужно забраковать.
    397
    398	0282  2C 20			     sub     al, 20h
Turbo Assembler	 Version 4.1	    24/05/08 13:09:05	    Page 8
KURS.asm



    399	0284  72 12			     jb	     short @ih3
    400
    401				     ; Если получили нечто слишком большое, тоже сдаёмся.
    402
    403	0286  3C 05			     cmp     al, 5
    404	0288  77 0E			     ja	     short @ih3
    405
    406				     ; Иначе исходный символ попал в 'a'..'f', отобразился в 0..5, и теперь,
    407				     ; если мы прибавим	к этому	десять,	получим	введённую шестнадцатеричную цифру.
    408
    409	028A			     @ih1:
    410
    411	028A  04 0A			     add     al, 10	     ; получаем	цифру
    412
    413				     ; Итак, в AL очередная цифра. Надо	приписать её справа к
    414				     ; уже имеющемуся в	CL числу. Для этого сдвигаем CL	на один	шестнадцатеричный
    415				     ; разряд, и заполняем его введённой шестнадцатеричной цифрой.
    416
    417	028C			     @ih2:
    418	028C  D1 E1 D1 E1 D1 E1	D1+	     shl     cx, 4	     ; сдвигаем	влево на один 16-ный разряд
    419	      E1
    420	0294  0A C8				 or	 cl, al
    421
    422				     ; Повторяем, пока не надоест вводить нечто	шестнадцатеричное.
    423
    424	0296  EB D6			     jmp     short @ih0	     ; то есть воод следующей цифры
    425
    426				     ; Сюда мы попадём,	когда введут нецифру. Здесь перейдём на	новую строку
    427	0298			     @ih3:
    428	0298  B4 02			     mov     ah, 02h	     ; выводим эту "нецифру" на	консоль, чтоб пользователь понял,   +
    429				     что ошибся, и мы прекратили ввод
    430	029A  B2 0D			     mov     dl, 0Dh ; "нажимаем" Enter
    431	029C  CD 21			     int     21h
    432
    433	029E  B2 0A			     mov     dl, 0Ah ; перевод строки
    434	02A0  CD 21			     int     21h
    435
    436	02A2  89 0E 0015r	     mov Number, cx  ; результат поместили в нашу переменную
    437
    438	02A6  8B C1			     mov     ax, cx  ; и запишем результат в AX.
    439	02A8  5A			     pop     dx
    440	02A9  59			     pop     cx
    441	02AA  C3			     ret
    442	02AB			     Input16   endp	     ; конец процедуры
    443
    444				     end Start		     ; конец основной программы
Turbo Assembler	 Version 4.1	    24/05/08 13:09:05	    Page 9
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "24/05/08"
??FILENAME			  Text	 "KURS	  "
??TIME				  Text	 "13:09:05"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 KURS
@IH0				  Near	 _TEXT:026E
@IH1				  Near	 _TEXT:028A
@IH2				  Near	 _TEXT:028C
@IH3				  Near	 _TEXT:0298
@INTERFACE			  Text	 000H
@MODEL				  Text	 2
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CIFRA				  Near	 _TEXT:024A
CLEARSCREEN			  Near	 _TEXT:0255
CM1				  Near	 _TEXT:012D
CM2				  Near	 _TEXT:0134
ENTER				  Near	 _TEXT:018E
INPUT16				  Near	 _TEXT:026A
KURSOR				  Near	 _TEXT:0263
MES_1				  Byte	 DGROUP:010D
MES_2				  Byte	 DGROUP:0136
MES_3				  Byte	 DGROUP:015F
METKA				  Near	 _TEXT:01D7
NACHALO				  Byte	 DGROUP:003F
NEXT				  Near	 _TEXT:01AB
NUMBER				  Word	 DGROUP:0015
PER10				  Near	 _TEXT:0136
PER16				  Near	 _TEXT:01A0
PER2				  Near	 _TEXT:01A6
PEREVOD_NUM			  Near	 _TEXT:0238
PROVERKA_NUM			  Near	 _TEXT:023D
R1				  Near	 _TEXT:013F
R3				  Near	 _TEXT:0167
START				  Near	 _TEXT:0100
STOP				  Near	 _TEXT:01CF
STRING				  Byte	 DGROUP:0000
STRINGEND			  Number DGROUP:0014
VIBORSS				  Near	 _TEXT:0122
VIHOD				  Byte	 DGROUP:0188
VVOD				  Byte	 DGROUP:008A
ZAB				  Near	 _TEXT:0174
Turbo Assembler	 Version 4.1	    24/05/08 13:09:05	    Page 10
Symbol Table




Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  STACK				  16  0100 Para	  Stack	  STACK
  _DATA				  16  01B3 Word	  Public  DATA
_TEXT				  16  02AB Word	  Public  CODE
Turbo Assembler	 Version 4.1	    24/05/08 13:09:05	    Page 11
Error Summary



*Warning* KURS.asm(122)	Reserved word used as symbol: ENTER
